#!/usr/bin/env python
#
# Copyright (C) 2016 The EFIDroid Project
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# common imports
import os.path
import sys
import os
import argparse
import subprocess

sys.path.append(os.path.join(os.path.dirname(__file__), '../core'))
from utils import *

def inputchoice(msg, choices, helptexts=[]):
    print(bldylw+msg+txtrst)

    for idx,choice in enumerate(choices):
        helptext = ''
        if idx<len(helptexts):
            helptext = ' ('+helptexts[idx]+')'
        print('%u) %s%s' % (idx+1, choice, helptext))

    again = True
    while again:
        strnum = inputex('> ')
        try:
            num = int(strnum)
            if num>0 and num<=len(choices):
                again = False
        except:
            pass

        if again:
            print(bldred+'Invalid choice: '+strnum+txtrst)

    return choices[num-1]

def get_gcc_archs():
    archs = []

    p = subprocess.Popen(['gcc', '-dumpmachine'], stdout=subprocess.PIPE)
    machine = p.communicate()[0]
    if p.returncode != 0:
        pr_fatal('can\'t check native gcc version')
    native_arch = machine.split('-')[0]

    if native_arch=='i686':
        archs += ['x86']
    if native_arch=='x86_64':
        archs += ['x86']
        archs += ['x86_64']

    return archs

def main(argv):
    top = os.environ['TOP']

    # check arguments
    if not len(argv) >= 1:
        raise Exception('Invalid number of arguments')
    outfile = argv[0]

    # parse args
    parser = argparse.ArgumentParser(prog='lunch', formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--reset', dest='reset', action='store_const', const=True,
                        help='reset all previously set lunch variables')
    parser.add_argument('--select', dest='select', type=str, default="device,buildtype",
                        help='\n'.join([
                            'comma-separated list of configs to change.',
                            'Default value: device,buildtype',
                            'Possible values:',
                            '  arch',
                            '  toolchain_none',
                            '  toolchain_linux',
                            '  device',
                            '  buildtype',
                            '\n',
                        ]))
    parser.add_argument('--online', dest='online', action='store_const', const=True,
                        help='include devices from EFIDroid repository')
    parser.add_argument('--arch', dest='arch', type=str, help='architecture value')
    parser.add_argument('--toolchain_none', dest='toolchain_none', type=str, help='toolchain_none value')
    parser.add_argument('--toolchain_linux', dest='toolchain_linux', type=str, help='toolchain_linux value')
    parser.add_argument('--device', dest='device', type=str, help='device value')
    parser.add_argument('--buildtype', dest='buildtype', type=str, help='buildtype value')
    args = parser.parse_args(argv[1:])

    select = args.select.strip()
    if len(select)==0:
        select = []
    else:
        select = args.select.split(',')
    for config in select:
        if config=='arch':
            if not args.arch:
                archs = ['arm']
                archs += get_gcc_archs()

                args.arch = inputchoice('Architecture: ', archs)

        elif config=='toolchain_none':
            if not args.toolchain_none:
                args.toolchain_none = inputex('gcc-none toolchain: ')

        elif config=='toolchain_linux':
            if not args.toolchain_linux:
                args.toolchain_linux = inputex('gcc-linux toolchain: ')

        elif config=='device':
            if not args.device:
                # get device list
                devices = []
                if os.path.exists(top+'/device'):
                    for vendor in os.listdir(top+'/device'):
                        for device in os.listdir(top+'/device/'+vendor):
                            if os.path.exists(top+'/device/'+vendor+'/'+device+'/config.ini'):
                                devices += [vendor+'/'+device]

                if args.online:
                    p = subprocess.Popen(['git', 'ls-remote', '--heads', 'https://github.com/efidroid/device.git'], stdout=subprocess.PIPE)
                    data = p.communicate()[0]
                    if p.returncode != 0:
                        pr_fatal('can\'t get online devices')

                    for head in data.splitlines():
                        codename = head.split('refs/heads/')[1]
                        if not codename in devices:
                            devices += [codename]

                devices.sort()
                devices.append('CUSTOM')

                # device
                deviceid = inputchoice('Device name: ', devices)
                if deviceid==devices[-1]:
                    deviceid = inputex('Device name (vendor/codename): ')

                args.device = deviceid

        elif config=='buildtype':
            if not args.buildtype:
                # build type
                args.buildtype = 'DEBUG'
                # args.buildtype = inputchoice('build type: ', ['RELEASE', 'DEBUG', 'USERDEBUG'], [
                #     'debugging disabled - for speed',
                #     'debugging enabled',
                #     'debug UEFI applications only',
                # ])

        else:
            raise Exception('unsupported config \'%s\'' % config)

    # write config
    with open(outfile, 'w') as f:
        if args.reset:
            f.write('unset EFIDROID_TOOLCHAIN_NAME_GCC_NONE\n')
            f.write('unset EFIDROID_TOOLCHAIN_NAME_GCC_LINUX\n')
            f.write('unset EFIDROID_TARGET_ARCH\n')
            f.write('unset EFIDROID_DEVICEID\n')
            f.write('unset EFIDROID_BUILDTYPE\n')

        if args.toolchain_none:
            f.write('export EFIDROID_TOOLCHAIN_NAME_GCC_NONE='+args.toolchain_none+'\n')
        if args.toolchain_linux:
            f.write('export EFIDROID_TOOLCHAIN_NAME_GCC_LINUX='+args.toolchain_linux+'\n')

        if args.arch:
            f.write('export EFIDROID_TARGET_ARCH='+args.arch+'\n')

        if args.device:
            f.write('export EFIDROID_DEVICEID='+args.device+'\n')
        if args.buildtype:
            f.write('export EFIDROID_BUILDTYPE='+args.buildtype+'\n')

if __name__ == '__main__':
    runmain(main)
